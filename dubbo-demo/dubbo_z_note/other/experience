心得体会以及改正纠错

以时间单位考核自己

先走通流程，在考虑细节（先把主流程搞懂熟悉，相关的知识以及子流程，大致了解下有个映像。当主流程熟悉了，然后在针对地解决子流程和相关知识）

19/6/18
赞扬之处：
        目前已经坚持学习ym 34天，并且动力越来越强，值的表扬。学会看ym、用ym、改ym。
        学会了坚持，心态也安静平稳了（不要幻想未来怎样，把握好现在才是最重要。改变不了未来，但一定能做好现在）
不足之处：
        1）实践能力不强，偏理论。要等ym理解完，才去写ym。 看ym是为了整理思路、问题，用ym：调试分析、数据分析，改ym：学以致用
           所以要加强实践，每天都要动手写代码，不管理解多少ym，能写多少就多少
        2）思维能力不强，不主动思考，做了就不管。零散时间应该用起来，多去想想。
        3）精神不能集中，总是中断思维，效率低下。

总结：增加写代码实践时间； 增加思考时间，加强思考； 集中精神，减少走神浪费时间 (简而言之：增加写代码时间、增加思考时间、减少走神时间)
形成稳定、高效的学习时间（删除：早、晚7ym 看用改，中零散时间d理论， 实践需要安静、比较长的时间，理论比较片段，内容容易变，所以零散时间解决【温故已经看过的ym】）
（始终围绕d 学习、实践）

19/6/19
要反复的学习、实践，什么东西一遍是学不好的，要反复去尝试，直到完全掌握为止。
还有要经常回看已看过的源码，加深影响。

19/6/20
第一阶段是全力实践阶段，先暂不管理论，不要把时间和精力分散（始终围绕ym 学习、实践）
形成稳定、高效、足够、集中的学习时间。
稳定：每天坚持学习，坚持在指定的时间段学习
高效：有充足的睡眠休息时间，晚11点，早8点，不要熬夜，既伤身体也不能集中精神高效学习
足够：做好一件时间，必须要投入大量时间学习研究。早上1小时、中午1小时、下午3小时
集中：不要把时间精力分散，比如第一阶段是实践阶段，就不要把时间分散搞理论或其它的知识
工作和学习时间，尽量不要交叉，各司其职。
但经常会两者不能兼顾，优先、偏重学习。优先保证5小时的学习时间

19/6/23
优先保证学习时间，充足、连续（11:00-13:00, 18:30-21:30） 剩余的时间工作、可回来工作
早上7-8点 健身

1）看源码：按流程来看，然后把流程中的内容按点拆分开，各个点突破，最后以点连线。
2）源码中只要是不阻塞流程的知识，都可以暂且放放，时刻围绕中心思想、时刻抓住核心进行学习实践。
3）看源码最核心的是，明白源码内部实现逻辑以及原理，相关知识知识附带，不学不影响，学了辅助源码理解学习。

19/6/26
每天时间不要定死，可以弹性变化，只要能推进就好
每天正常范围3-5小时，如果中午有事，可去掉2小时。

19/6/28
1.看源码，扫描一下概念，了解一下流程、问题，理解不了和想不通都是正常的
2.然后组装条件，覆盖代码逻辑，调试
3.改造源码，没完全理解也不要紧，理解多少就改造多少。总之，不管遇到什么问题，一定要冷静下来，想想解决方案。然后分而治之，一步步解决问题。

19/7/20
不懂的地方，预先埋好点以及打印好日志，调试分析或日志分析


------边看、边调、边学（三者要结合进行，不要互相等待）-------
------模块之间不要互相等待，可同步进行，只要最后能看完、能理解完就行------
------以问题点入口，平时出现的问题，要收集起来，并且通过 源码+数据+文档形式解决----
------从现在开始，不断的解决问题，不断地去把学习的知识应用起来，只要能解决问题了，自然就有兴趣了，自然就肯学习了---
------按流程，一个小流程一个小流程来看，以流程为主、模块为辅------------
------看类：要看类的继承关系、实现关系、派生关系；看类包含的数据结构；看构造方法以及初始化方法-----
------多动手画画类图、流程图、数据结构等，加深理解-------
------(*** 出现的问题、以及涉及到的知识点，要及时的解决、及时的理解掌握，不要互相等待 ***)--------
------（*** 精通一样事情，必须要投入大量的时间去研究实践，长期泡在那个环境中。所以要争分多秒、挤出更多的时间研究实践dubbo源码 ***）----------
-------看流程中代码时，接着上次看完的地方看，前面看过的部分回顾一下就行，不需要又花费很多时间重新去看---------------
-------java 的一些高级特性（平时不一定用到、并且有一定难度的）、用法要会，Netty的基本用法要会---------
-------java 对象可以和表对应起来思考----------

2018/10/27（能够学到知识、解决问题、自然会感兴趣了）
1.不能在没理解代码的时候、没看相关知识的，盲目的调试。因为并不知道为什么会这么调用，会什么要用这个技术
17/9 - 17/10 尝试一个月，调试dubbo-remoting，并没有效果

2.不能在没有调试、没有看相关知识情况下，盲目看代码，只是应付的读代码，根本看不懂，不知道有何用途，理出来的知识点和问题，很难解决
18/9 - 18/10 尝试一个月，虽然看完了dubbo-rpc-api，dubbo-rpc-default两个模块代码，也整理出知识点、问题点，但是只是看代码
能力没有本质提高

3.在有看代码、有调试、有学些相关知识的情况下，看了dubbo-romoting-api中的一个buffer块，虽然比较缓慢，但已经看到了效果了，也提高
了个人学习兴趣，提高了学习积极性。
18/10 - 18/11 尝试一个月，看完了，并调试部分buffer包下的类，并且学习了java NIO、Netty中的buffer、channel